# Generated by Django 3.1.7 on 2021-06-25 06:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('bgColor', models.CharField(blank=True, max_length=10, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_client', models.BooleanField(default=True)),
                ('is_caseworker', models.BooleanField(default=False)),
                ('has_caseworker', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_name', models.CharField(max_length=100)),
                ('article_descript', models.CharField(max_length=200)),
                ('article_content', models.CharField(max_length=5000)),
            ],
            options={
                'unique_together': {('article_name', 'article_descript')},
            },
        ),
        migrations.CreateModel(
            name='BgInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('middle_initial', models.CharField(max_length=3)),
                ('phone_number', models.CharField(max_length=10)),
                ('birthday', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer not to say', 'Prefer Not To Say')], max_length=20)),
                ('insurance_provider', models.CharField(default='Provider', max_length=100)),
                ('insurance_member_id', models.CharField(default='0000000', max_length=25)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('firstname', 'lastname', 'middle_initial', 'email')},
            },
        ),
        migrations.CreateModel(
            name='ChatGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='all_group_members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Eligibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eligibility', models.CharField(choices=[('All Ages', 'All Ages'), ('Youth(under 12)', 'Youth(under 12)'), ('Teens(13-17)', 'Teens(13-17)'), ('Adults(18+)', 'Adults(18+)'), ('Seniors(60+)', 'Seniors(60+)')], max_length=75)),
            ],
        ),
        migrations.CreateModel(
            name='FileListing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(unique=True, upload_to='')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(max_length=100, unique=True)),
                ('website', models.CharField(max_length=100)),
                ('org_phone', models.CharField(max_length=10)),
                ('org_email', models.EmailField(max_length=60)),
                ('org_fax', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=500)),
                ('street', models.CharField(max_length=100)),
                ('apt_number', models.CharField(blank=True, max_length=10, null=True)),
                ('city', models.CharField(max_length=25)),
                ('state', models.CharField(choices=[('MD', 'MD')], max_length=20)),
                ('zipcode', models.CharField(max_length=10)),
                ('county', models.CharField(choices=[('Worcester', 'Worcester'), ('Wicomico', 'Wicomico'), ('Somerset', 'Somerset'), ('Dorchester', 'Dorchester')], max_length=10)),
                ('mail_street', models.CharField(blank=True, max_length=100, null=True)),
                ('mail_apt_number', models.CharField(blank=True, max_length=10, null=True)),
                ('mail_city', models.CharField(blank=True, max_length=25, null=True)),
                ('mail_state', models.CharField(blank=True, choices=[('MD', 'MD')], max_length=20, null=True)),
                ('mail_zipcode', models.CharField(blank=True, max_length=10, null=True)),
                ('mail_county', models.CharField(blank=True, choices=[('Worcester', 'Worcester'), ('Wicomico', 'Wicomico'), ('Somerset', 'Somerset'), ('Dorchester', 'Dorchester')], max_length=10, null=True)),
                ('contact_name', models.CharField(max_length=70)),
                ('contact_phone', models.CharField(max_length=10)),
                ('contact_title', models.CharField(max_length=50)),
                ('contact_email', models.EmailField(max_length=60)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('long', models.FloatField(blank=True, null=True)),
                ('eligibility', models.ManyToManyField(to='app.Eligibility')),
            ],
        ),
        migrations.CreateModel(
            name='PillTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=100, unique=True)),
                ('service_descript', models.CharField(max_length=500)),
                ('service_intake_eligibility', models.CharField(max_length=200)),
                ('service_contact_name', models.CharField(max_length=100)),
                ('service_contact_email', models.EmailField(max_length=254)),
                ('service_contact_phone', models.CharField(max_length=10)),
                ('service_contact_address', models.CharField(max_length=100)),
                ('service_city', models.CharField(max_length=25)),
                ('service_zipcode', models.CharField(max_length=5)),
                ('service_county', models.CharField(choices=[('Worcester', 'Worcester'), ('Wicomico', 'Wicomico'), ('Somerset', 'Somerset'), ('Dorchester', 'Dorchester')], max_length=10)),
                ('service_eligibility', models.CharField(choices=[('All Ages', 'All Ages'), ('Children & Youth (17 and under)', 'Children & Youth (17 and under)'), ('Adults (18-60)', 'Adults (18-60)'), ('Seniors (60+)', 'Seniors (60+)')], max_length=75)),
                ('service_url', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True)),
                ('testtags', models.ManyToManyField(blank=True, to='app.PillTags')),
            ],
        ),
        migrations.CreateModel(
            name='SubDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=200)),
                ('subdirectory_organization', models.ManyToManyField(blank=True, related_name='organizations', to='app.Organizations')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dir_name', models.CharField(max_length=50, unique=True)),
                ('dir_descript', models.CharField(max_length=200)),
                ('dir_articles', models.ManyToManyField(blank=True, related_name='articles', to='app.Articles')),
                ('dir_services', models.ManyToManyField(blank=True, related_name='services', to='app.Services')),
            ],
        ),
        migrations.AddField(
            model_name='organizations',
            name='org_tags',
            field=models.ManyToManyField(blank=True, to='app.PillTags'),
        ),
        migrations.CreateModel(
            name='OfflineMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=1024)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='offline_to_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='offline_from_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=1024)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('chat_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.chatgroup')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='messages_sent', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClientList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clients', models.ManyToManyField(blank=True, related_name='clients', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Channels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_name', models.CharField(max_length=512)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EcInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=10)),
                ('relationship', models.CharField(max_length=20)),
                ('primary_care_physician', models.CharField(max_length=50)),
                ('physician_phone', models.CharField(max_length=10)),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.bginfo')),
            ],
            options={
                'unique_together': {('background', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DemoInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=100)),
                ('apt_unit', models.CharField(max_length=10)),
                ('city', models.CharField(max_length=25)),
                ('zipcode', models.CharField(max_length=5)),
                ('county', models.CharField(choices=[('Worcester', 'Worcester'), ('Wicomico', 'Wicomico'), ('Somerset', 'Somerset'), ('Dorchester', 'Dorchester')], max_length=10)),
                ('state', models.CharField(choices=[('MD', 'Maryland')], max_length=20)),
                ('ethnicity', models.CharField(choices=[('Hispanic or Latino', 'Hispanic or Latino'), ('Not Hispanic or Latino', 'Not Hispanic or Latino'), ('No Response', 'No Response')], max_length=25)),
                ('race', models.CharField(choices=[('American Indian or Alask Native', 'American Indian or Alaska Native'), ('Asian', 'Asian'), ('Black or African American', 'Black or African American'), ('Native Hawaiin or Other Pacific Islander', 'Native Hawaiin or Other Pacific Islander'), ('White', 'White'), ('Two or More Races', 'Two or More Races'), ('No Response', 'No Response')], max_length=50)),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.bginfo')),
            ],
            options={
                'unique_together': {('background', 'zipcode', 'street_address')},
            },
        ),
        migrations.CreateModel(
            name='ClientNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.CharField(max_length=10000)),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.bginfo')),
            ],
            options={
                'unique_together': {('background', 'notes')},
            },
        ),
    ]
